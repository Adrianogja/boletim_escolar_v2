

# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\extrair_codigos.py
# --------------------------------------------------

import os

# Caminho da pasta raiz do projeto
project_path = "D:\\My Documents\\Download\\Curso Django\\Projetos\\VisualCode\\Boletim_online_v2\\boletim_escolar_v2"
output_file = "D:\\My Documents\\Download\\Curso Django\\Projetos\\VisualCode\\Boletim_online_v2\\codigo_projeto.txt"

# Tipos de arquivos a serem incluídos no txt final
file_extensions = ['.py', '.html', '.css', '.js']

def extract_code_from_project(project_path, output_file):
    try:
        with open(output_file, 'w', encoding='utf-8') as outfile:
            for root, dirs, files in os.walk(project_path):
                for file in files:
                    if any(file.endswith(ext) for ext in file_extensions):
                        file_path = os.path.join(root, file)
                        outfile.write(f"\n\n# {'-'*50}\n")
                        outfile.write(f"# Arquivo: {file_path}\n")
                        outfile.write(f"# {'-'*50}\n\n")
                        try:
                            with open(file_path, 'r', encoding='utf-8') as infile:
                                outfile.write(infile.read())
                        except Exception as e:
                            print(f"Erro ao ler o arquivo {file_path}: {e}")
        print(f"Códigos extraídos para o arquivo: {output_file}")
    except Exception as e:
        print(f"Erro ao escrever no arquivo de saída: {e}")

# Executa a função
extract_code_from_project(project_path, output_file)


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\manage.py
# --------------------------------------------------

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'boletim_escolar_v2.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\boletim_escolar_v2\asgi.py
# --------------------------------------------------

"""
ASGI config for boletim_escolar_v2 project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'boletim_escolar_v2.settings')

application = get_asgi_application()


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\boletim_escolar_v2\settings.py
# --------------------------------------------------

"""
Django settings for boletim_escolar_v2 project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os  # Certifique-se de que este import esteja presente

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$0wj^9f@lm@ono6+6i%$e9w@7_x(_lff-&qno^@i)!qrkf!w_6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'boletim_escolar_v2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Aqui você pode adicionar outros diretórios de templates se necessário
        'APP_DIRS': True,  # Isso permite que o Django procure templates dentro de cada app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'boletim_escolar_v2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\boletim_escolar_v2\urls.py
# --------------------------------------------------

# boletim_escolar_v2/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),           # URL para o painel administrativo
    path('', include('core.urls')),            # Inclui as URLs do app core
]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\boletim_escolar_v2\wsgi.py
# --------------------------------------------------

"""
WSGI config for boletim_escolar_v2 project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'boletim_escolar_v2.settings')

application = get_wsgi_application()


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\boletim_escolar_v2\__init__.py
# --------------------------------------------------



# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\admin.py
# --------------------------------------------------

from django.contrib import admin

from .models import Aluno, Professor, Turma, Disciplina, Nota

# Registrar os modelos no admin
admin.site.register(Aluno)
admin.site.register(Professor)
admin.site.register(Turma)
admin.site.register(Disciplina)
admin.site.register(Nota)

# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\apps.py
# --------------------------------------------------

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\forms.py
# --------------------------------------------------

#boletim_escolar_v2/core/forms.py

from django import forms
from .models import Aluno, Professor, Disciplina, Turma

# ------------------------------------------------------------
# Formulário Aluno
# ------------------------------------------------------------
class AlunoForm(forms.ModelForm):
    data_nascimento = forms.DateField(
        widget=forms.DateInput(format='%d/%m/%Y', attrs={'placeholder': 'dd/mm/yyyy'}),
        input_formats=['%d/%m/%Y', '%Y-%m-%d'],
    )
    email_responsavel = forms.EmailField(
        required=False,
        widget=forms.EmailInput(attrs={'placeholder': 'exemplo@dominio.com'})
    )
    telefone_responsavel = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={'placeholder': '(xx) xxxx-xxxx'})
    )

    class Meta:
        model = Aluno
        exclude = ['user']  # Exclui o campo user do formulário


# ------------------------------------------------------------
# Formulário Turma
# ------------------------------------------------------------
class TurmaForm(forms.ModelForm):
    # Campo para selecionar múltiplos alunos (opcional)
    alunos = forms.ModelMultipleChoiceField(
        queryset=Aluno.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False  # Não é mais obrigatório
    )
    
    # Campo para selecionar múltiplos professores (opcional)
    professores = forms.ModelMultipleChoiceField(
        queryset=Professor.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False  # Não é mais obrigatório
    )

    class Meta:
        model = Turma
        fields = ['ano', 'classe', 'alunos', 'professores']  # Campos para criação/edição da turma


# ------------------------------------------------------------
# Formulário Professor
# ------------------------------------------------------------
class ProfessorForm(forms.ModelForm):
    
    # Campo para selecionar múltiplas disciplinas (opcional)
    disciplinas = forms.ModelMultipleChoiceField(
        queryset=Disciplina.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False  # O campo é opcional
    )

    class Meta:
        model = Professor
        fields = ['nome', 'email', 'telefone', 'disciplinas']  # Inclui os novos campos e disciplinas


# ------------------------------------------------------------
# Formulário Disciplina
# ------------------------------------------------------------
class DisciplinaForm(forms.ModelForm):
    class Meta:
        model = Disciplina
        fields = ['nome']  # Apenas o nome da disciplina

# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\models.py
# --------------------------------------------------

#boletim_escolar_v2/core/models.py


from django.db import models
from django.contrib.auth.models import User

# ------------------------------------------------------------
# Modelo Aluno
# ------------------------------------------------------------
class Aluno(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='aluno_profile')
    nome = models.CharField(max_length=100)
    rm = models.CharField(max_length=20, unique=True)  # Registro de matrícula único
    ra_rg = models.CharField(max_length=20, blank=True, null=True)  # RA ou RG (opcional)
    data_nascimento = models.DateField()  # Data de nascimento do aluno
    
    # Status do aluno (Ativo, Transferido ou Suplente)
    status = models.CharField(
        max_length=11,
        choices=[('ativo', 'Ativo'), ('transferido', 'Transferido'), ('suplente', 'Suplente')],
        default='ativo'
    )
    
    # Dados de contato do responsável (não obrigatórios)
    email_responsavel = models.EmailField(max_length=100, blank=True, null=True)
    telefone_responsavel = models.CharField(max_length=15, blank=True, null=True)

    def __str__(self):
        return self.nome


# ------------------------------------------------------------
# Modelo Disciplina
# ------------------------------------------------------------
class Disciplina(models.Model):
    nome = models.CharField(max_length=100)  # Nome da disciplina

    def __str__(self):
        return self.nome


# ------------------------------------------------------------
# Modelo Professor
# ------------------------------------------------------------
class Professor(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='professor_profile')  # Conexão com o User do Django
    nome = models.CharField(max_length=255)  # Nome completo do professor
    
    # Informações de contato (opcionais)
    email = models.EmailField(max_length=100, blank=True, null=True)
    telefone = models.CharField(max_length=15, blank=True, null=True)

    # Relacionamento muitos-para-muitos com Disciplina
    disciplinas = models.ManyToManyField(Disciplina, related_name='professores')

    def __str__(self):
        return self.nome
    

# ------------------------------------------------------------
# Modelo Turma
# ------------------------------------------------------------
class Turma(models.Model):
    ano = models.PositiveIntegerField()  # Ano da turma (Exemplo: 2024)
    classe = models.CharField(max_length=5, default='Indefinido')  # Classe (Exemplo: 1A, 2B, etc.)
    
    # Relacionamento muitos-para-muitos com Aluno e Professor
    alunos = models.ManyToManyField(Aluno, related_name='turmas')
    professores = models.ManyToManyField(Professor, related_name='turmas')

    def __str__(self):
        return f"{self.ano} - {self.classe}"

    class Meta:
        verbose_name = "Turma"
        verbose_name_plural = "Turmas"


# ------------------------------------------------------------
# Modelo Nota
# ------------------------------------------------------------
class Nota(models.Model):
    # Relacionamento com Aluno e Disciplina
    aluno = models.ForeignKey('Aluno', on_delete=models.CASCADE)
    disciplina = models.ForeignKey('Disciplina', on_delete=models.CASCADE)

    # Notas e faltas de cada bimestre
    nota_bimestre1 = models.FloatField(default=0)
    faltas_bimestre1 = models.IntegerField(default=0)
    nota_bimestre2 = models.FloatField(default=0)
    faltas_bimestre2 = models.IntegerField(default=0)
    nota_bimestre3 = models.FloatField(default=0)
    faltas_bimestre3 = models.IntegerField(default=0)
    nota_bimestre4 = models.FloatField(default=0)
    faltas_bimestre4 = models.IntegerField(default=0)

    # Média final do aluno
    media_final = models.FloatField(default=0)

    # Status final do aluno
    STATUS_CHOICES = [
        ('P', 'Promovido'),
        ('PC', 'Promovido pelo conselho'),
        ('T', 'Transferido'),
        ('R', 'Retido'),
        ('NC', 'Não Comparecimento'),
        ('AB', 'Abandono'),
        ('RC', 'Reclassificado'),
        ('RM', 'Remanejado'),
    ]
    status_final = models.CharField(max_length=2, choices=STATUS_CHOICES, default='P')

    def __str__(self):
        return f"{self.aluno.nome} - {self.disciplina.nome}"


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\tests.py
# --------------------------------------------------

from django.test import TestCase

# Create your tests here.


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\urls.py
# --------------------------------------------------

# boletim_escolar_v2/core/urls.py

from django.urls import path
from . import views
from .views import ProfessorLoginView, professor_logout, ProfessorHomeView, ProfessorPasswordChangeView, login_aluno, cadastrar_aluno
from django.contrib.auth.views import LogoutView

urlpatterns = [
    # ------------------------------------------------------------
    # Páginas principais
    # ------------------------------------------------------------
    path('', views.index, name='index'),  # Página inicial
    path('professor/', ProfessorHomeView.as_view(), name='professor_home'),
    path('aluno/', views.aluno, name='aluno'),  # Página do aluno
    path('secretaria/', views.secretaria, name='secretaria'),  # Página da secretaria

    # ------------------------------------------------------------
    # Gestão de Alunos
    # ------------------------------------------------------------
    path('alunos/', views.gerenciar_alunos, name='gerenciar_alunos'),  # Gerenciar alunos
    path('secretaria/editar_aluno/<int:aluno_id>/', views.editar_aluno, name='editar_aluno'),
    path('secretaria/excluir_aluno/<int:aluno_id>/', views.excluir_aluno, name='excluir_aluno'),
    path('secretaria/consultar_aluno/<int:aluno_id>/', views.consultar_aluno, name='consultar_aluno'),
    path('login_aluno/', login_aluno, name='login_aluno'),
    path('aluno_home/', views.aluno_home, name='aluno_home'),
    path('logout/', LogoutView.as_view(), name='logout'),  # Adiciona a URL para logout
    path('logout_aluno/', views.aluno_logout, name='logout_aluno'),  # Adiciona a URL para logout do aluno

    # ------------------------------------------------------------
    # Cadastro na Secretaria (Alunos, Professores, Disciplinas)
    # ------------------------------------------------------------
    #path('secretaria/cadastrar_aluno/', views.cadastrar_aluno, name='cadastrar_aluno'),
    path('secretaria/cadastrar_aluno/', cadastrar_aluno, name='cadastrar_aluno'),
    path('secretaria/cadastrar_professor/', views.cadastrar_professor, name='cadastrar_professor'),
    path('secretaria/cadastrar_disciplina/', views.cadastrar_disciplina, name='cadastrar_disciplina'),

    # ------------------------------------------------------------
    # Gestão de Turmas
    # ------------------------------------------------------------
    path('gerenciar_turmas/', views.gerenciar_turmas, name='gerenciar_turmas'),
    path('secretaria/criar_turma/', views.criar_turma, name='criar_turma'),
    path('secretaria/editar_turma/<int:pk>/', views.editar_turma, name='editar_turma'),
    path('consultar_turma/<int:turma_id>/', views.consultar_turma, name='consultar_turma'),
    path('secretaria/excluir_turma/<int:pk>/', views.excluir_turma, name='excluir_turma'),
    path('turma/<int:turma_id>/', views.detalhes_turma, name='detalhes_turma'),

    # ------------------------------------------------------------
    # Gestão de Professores
    # ------------------------------------------------------------
    path('secretaria/gerenciar_professores/', views.gerenciar_professores, name='gerenciar_professores'),
    path('login_professor/', ProfessorLoginView.as_view(), name='login_professor'),
    path('logout_professor/', views.professor_logout, name='logout_professor'),
    path('professor/mudar-senha/', ProfessorPasswordChangeView.as_view(), name='mudar_senha_professor'),

    # Editar, Excluir e Consultar Professor
    path('secretaria/editar_professor/<int:professor_id>/', views.editar_professor, name='editar_professor'),
    path('secretaria/excluir_professor/<int:professor_id>/', views.excluir_professor, name='excluir_professor'),
    path('secretaria/consultar_professor/<int:professor_id>/', views.consultar_professor, name='consultar_professor'),

    # ------------------------------------------------------------
    # Gestão de Disciplinas
    # ------------------------------------------------------------
    path('disciplinas/', views.gerenciar_disciplinas, name='gerenciar_disciplinas'),
    path('disciplinas/editar/<int:disciplina_id>/', views.editar_disciplina, name='editar_disciplina'),
    path('disciplinas/excluir/<int:disciplina_id>/', views.excluir_disciplina, name='excluir_disciplina'),
    path('disciplinas/consultar/<int:disciplina_id>/', views.consultar_disciplina, name='consultar_disciplina'),
    path('disciplinas/cadastrar/', views.cadastrar_disciplina, name='cadastrar_disciplina'),
]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\views.py
# --------------------------------------------------

#boletim_escolar_v2/core/views.py

# ------------------------------------------------------------
# Importações
# ------------------------------------------------------------
from django.shortcuts import render, redirect, get_object_or_404
from .models import Aluno, Turma, Professor, Disciplina, Nota
from .forms import AlunoForm, TurmaForm, ProfessorForm, DisciplinaForm
from django.contrib.auth.views import LoginView, PasswordChangeView
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout, login, authenticate
from django.urls import reverse_lazy
from django.views.generic import TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User
from random import randint
from django.contrib import messages
from django.contrib.auth import authenticate, login
from django.contrib.auth.decorators import login_required


# ------------------------------------------------------------
# Páginas Gerais (Index, Professor, Aluno, Secretaria)
# ------------------------------------------------------------

def index(request):
    return render(request, 'core/index.html')

def professor(request):
    return render(request, 'core/professor.html')

def aluno(request):
    return render(request, 'core/aluno.html')

def secretaria(request):
    return render(request, 'core/secretaria.html')


# ------------------------------------------------------------
# Gestão de Turmas
# ------------------------------------------------------------

# Gerenciar turmas (listar turmas)
def gerenciar_turmas(request):
    turmas = Turma.objects.all()
    return render(request, 'core/gerenciar_turmas.html', {'turmas': turmas})

# Consultar uma turma específica
def consultar_turma(request, turma_id):
    turma = Turma.objects.get(id=turma_id)
    return render(request, 'core/consultar_turma.html', {'turma': turma})

# Excluir uma turma
def excluir_turma(request, pk):
    turma = Turma.objects.get(pk=pk)
    turma.delete()
    return redirect('gerenciar_turmas')

# Criar nova turma
def criar_turma(request):
    alunos = Aluno.objects.all().order_by('nome')  # Busca todos os alunos
    professores = Professor.objects.all().order_by('nome')  # Busca todos os professores

    if request.method == 'POST':
        form = TurmaForm(request.POST)
        if form.is_valid():
            turma = form.save()
            turma.alunos.set(request.POST.getlist('alunos'))
            turma.professores.set(request.POST.getlist('professores'))
            return redirect('gerenciar_turmas')
    else:
        form = TurmaForm()

    return render(request, 'core/criar_turma.html', {'form': form, 'alunos': alunos, 'professores': professores})


# Editar turma existente
def editar_turma(request, pk):
    turma = get_object_or_404(Turma, pk=pk)
    alunos = Aluno.objects.all()
    professores = Professor.objects.all()

    if request.method == 'POST':
        form = TurmaForm(request.POST, instance=turma)
        if form.is_valid():
            form.save()
            return redirect('gerenciar_turmas')
    else:
        form = TurmaForm(instance=turma)

    return render(request, 'core/editar_turma.html', {
        'form': form,
        'alunos': alunos,
        'professores': professores,
        'turma': turma
    })


# ------------------------------------------------------------
# Gestão de Alunos
# ------------------------------------------------------------



def login_aluno(request):
    if request.method == 'POST':
        rm = request.POST['rm']
        password = request.POST['password']
        user = authenticate(request, username=rm, password=password)
        if user is not None:
            if hasattr(user, 'aluno_profile'):
                login(request, user)
                return redirect('aluno_home')
            else:
                messages.error(request, "Você não tem permissão para acessar esta página como aluno.")
        else:
            messages.error(request, "RM ou senha incorretos.")
    return render(request, 'core/login_aluno.html')



@login_required
def aluno_home(request):
    return render(request, 'core/aluno_home.html')




@login_required
def detalhes_turma(request, turma_id):
    turma = get_object_or_404(Turma, id=turma_id)
    alunos = turma.alunos.all()
    disciplinas = Disciplina.objects.filter(professores__in=turma.professores.all()).distinct()
    
    if request.method == 'POST':
        for aluno in alunos:
            for disciplina in disciplinas:
                nota, created = Nota.objects.get_or_create(aluno=aluno, disciplina=disciplina)
                nota.nota_bimestre1 = request.POST.get(f'nota_bimestre1_{aluno.id}', nota.nota_bimestre1) or 0
                nota.faltas_bimestre1 = request.POST.get(f'faltas_bimestre1_{aluno.id}', nota.faltas_bimestre1) or 0
                nota.nota_bimestre2 = request.POST.get(f'nota_bimestre2_{aluno.id}', nota.nota_bimestre2) or 0
                nota.faltas_bimestre2 = request.POST.get(f'faltas_bimestre2_{aluno.id}', nota.faltas_bimestre2) or 0
                nota.nota_bimestre3 = request.POST.get(f'nota_bimestre3_{aluno.id}', nota.nota_bimestre3) or 0
                nota.faltas_bimestre3 = request.POST.get(f'faltas_bimestre3_{aluno.id}', nota.faltas_bimestre3) or 0
                nota.nota_bimestre4 = request.POST.get(f'nota_bimestre4_{aluno.id}', nota.nota_bimestre4) or 0
                nota.faltas_bimestre4 = request.POST.get(f'faltas_bimestre4_{aluno.id}', nota.faltas_bimestre4) or 0
                nota.status_final = request.POST.get(f'status_final_{aluno.id}', nota.status_final)
                nota.save()
        return redirect('detalhes_turma', turma_id=turma.id)
    
    return render(request, 'core/detalhes_turma.html', {'turma': turma, 'alunos': alunos})




# Gerenciar alunos (listar alunos)
def gerenciar_alunos(request):
    query = request.GET.get('q', '')
    alunos = Aluno.objects.all()

    if query:
        alunos = alunos.filter(nome__icontains=query)

    alunos = alunos.order_by('nome')
    return render(request, 'core/gerenciar_alunos.html', {'alunos': alunos, 'query': query})

# Editar aluno específico
def editar_aluno(request, aluno_id):
    aluno = Aluno.objects.get(id=aluno_id)
    if request.method == 'POST':
        form = AlunoForm(request.POST, instance=aluno)
        if form.is_valid():
            form.save()
            return redirect('gerenciar_alunos')
    else:
        form = AlunoForm(instance=aluno)

    return render(request, 'core/editar_aluno.html', {'form': form, 'aluno': aluno})

# Excluir aluno
def excluir_aluno(request, aluno_id):
    aluno = Aluno.objects.get(id=aluno_id)
    aluno.delete()
    return redirect('gerenciar_alunos')

# Consultar dados de um aluno
def consultar_aluno(request, aluno_id):
    aluno = Aluno.objects.get(id=aluno_id)
    return render(request, 'core/consultar_aluno.html', {'aluno': aluno})


# Função de logout do aluno
def aluno_logout(request):
    logout(request)
    return redirect('login_aluno')


# Cadastrar aluno

def cadastrar_aluno(request):
    if request.method == 'POST':
        form = AlunoForm(request.POST)
        user_form = UserCreationForm(request.POST)
        if form.is_valid() and user_form.is_valid():
            aluno = form.save(commit=False)
            rm = form.cleaned_data['rm']
            username = rm
            print(f"RM: {rm}")
            print(f"Username: {username}")
            # Verificar se o username já existe
            if User.objects.filter(username=username).exists():
                messages.error(request, "O RM já está em uso. Por favor, escolha outro.")
                return render(request, 'core/cadastrar_aluno.html', {'form': form, 'user_form': user_form})
            user = user_form.save(commit=False)
            user.username = username
            user.set_password(user_form.cleaned_data['password1'])
            user.save()
            aluno.user = user
            aluno.save()
            print("Aluno cadastrado com sucesso!")
            return redirect('gerenciar_alunos')
        else:
            print(form.errors)
            print(user_form.errors)
    else:
        form = AlunoForm()
        user_form = UserCreationForm()
    return render(request, 'core/cadastrar_aluno.html', {'form': form, 'user_form': user_form})


# ------------------------------------------------------------
# Gestão de Professores
# ------------------------------------------------------------

# View para mudar a senha do professor
class ProfessorPasswordChangeView(PasswordChangeView):
    template_name = 'core/password_change.html'
    success_url = reverse_lazy('professor_home')  # Redireciona para a página inicial do professor após mudança de senha

    
class ProfessorLoginView(LoginView):
    template_name = 'core/login_professor.html'
    authentication_form = AuthenticationForm

    def form_valid(self, form):
        user = form.get_user()
        # Verifica se o usuário tem o perfil de professor
        if hasattr(user, 'professor_profile'):
            login(self.request, user)
            return redirect('professor_home')
        else:
            messages.error(self.request, "Você não tem permissão para acessar esta página como professor.")
            return redirect('login_professor')

# Página inicial do professor após login
class ProfessorHomeView(LoginRequiredMixin, UserPassesTestMixin, TemplateView):
    template_name = 'core/professor_home.html'

    def test_func(self):
        return hasattr(self.request.user, 'professor_profile')

    def handle_no_permission(self):
        messages.error(self.request, "Acesso restrito a professores.")
        return redirect('login_professor')
    

    def get_context_data(self, **kwargs):
        # Obtemos o professor com base no usuário logado
        professor = self.request.user.professor_profile
        
        # Supondo que o modelo Professor tenha um ManyToMany com Turma
        turmas = professor.turmas.all()  # 'turmas' é o nome do campo que se relaciona com Turma

        # Passamos as turmas para o template
        context = super().get_context_data(**kwargs)
        context['turmas'] = turmas
        return context


# Função de logout do professor
def professor_logout(request):
    logout(request)
    return redirect('login_professor')


# Gerenciar professores (listar professores)
def gerenciar_professores(request):
    query = request.GET.get('q', '')  # Busca por nome
    professores = Professor.objects.all()

    if query:
        professores = professores.filter(nome__icontains=query)  # Filtro por nome

    professores = professores.order_by('nome')  # Ordena por nome
    return render(request, 'core/gerenciar_professores.html', {'professores': professores, 'query': query})

# Editar dados de um professor
def editar_professor(request, professor_id):
    professor = Professor.objects.get(id=professor_id)
    if request.method == 'POST':
        form = ProfessorForm(request.POST, instance=professor)
        if form.is_valid():
            professor = form.save()
            # Caso existam disciplinas selecionadas no formulário
            disciplinas = form.cleaned_data.get('disciplinas')
            if disciplinas:
                professor.disciplinas.set(disciplinas)
            return redirect('gerenciar_professores')
    else:
        form = ProfessorForm(instance=professor)
    
    return render(request, 'core/editar_professor.html', {'form': form, 'professor': professor})

# Excluir um professor
def excluir_professor(request, professor_id):
    professor = Professor.objects.get(id=professor_id)
    professor.delete()
    return redirect('gerenciar_professores')

# Consultar dados de um professor
def consultar_professor(request, professor_id):
    professor = Professor.objects.get(id=professor_id)
    return render(request, 'core/consultar_professor.html', {'professor': professor})


# Cadastrar professor
def cadastrar_professor(request):
    if request.method == 'POST':
        form = ProfessorForm(request.POST)
        user_form = UserCreationForm(request.POST)

        if form.is_valid():
            # Preencher o username automaticamente com base no nome do professor
            nome = form.cleaned_data['nome']
            username = nome.split()[0].lower() + nome.split()[-1].lower()  # Exemplo: 'João Silva' -> 'joaosilva'

            # Verificar se o username já existe
            while User.objects.filter(username=username).exists():
                username = username + str(randint(1, 999))  # Adiciona um número aleatório ao username

            # Atribuir o username ao formulário de criação de usuário
            user_form.fields['username'].initial = username

            # Definir uma senha padrão (exemplo: 'senha@123')
            user_form.fields['password1'].initial = 'senha@123'
            user_form.fields['password2'].initial = 'senha@123'

            if user_form.is_valid():  # Validar o formulário de usuário depois de modificar os dados
                # Salvar o usuário
                user = user_form.save()

                # Salvar o professor, associando o usuário criado
                professor = form.save(commit=False)
                professor.user = user  # Associa o usuário ao professor
                professor.save()

                # Se houver disciplinas associadas, associar ao professor
                disciplinas = form.cleaned_data.get('disciplinas')
                if disciplinas:
                    professor.disciplinas.set(disciplinas)

                return redirect('gerenciar_professores')
            else:
                print(user_form.errors)  # Para depuração
        else:
            print(form.errors)  # Para depuração
    else:
        form = ProfessorForm()
        user_form = UserCreationForm()  # Cria o formulário de usuário vazio

    return render(request, 'core/cadastrar_professor.html', {
        'form': form,
        'user_form': user_form  # Passa o formulário de usuário para o template
    })


# ------------------------------------------------------------
# Gestão de Disciplinas
# ------------------------------------------------------------

# Gerenciar disciplinas (listar disciplinas)
def gerenciar_disciplinas(request):
    disciplinas = Disciplina.objects.all()
    return render(request, 'core/gerenciar_disciplinas.html', {'disciplinas': disciplinas})

# Editar dados de uma disciplina
def editar_disciplina(request, disciplina_id):
    disciplina = get_object_or_404(Disciplina, pk=disciplina_id)
    if request.method == 'POST':
        form = DisciplinaForm(request.POST, instance=disciplina)
        if form.is_valid():
            form.save()
            return redirect('gerenciar_disciplinas')
    else:
        form = DisciplinaForm(instance=disciplina)
    return render(request, 'core/editar_disciplina.html', {'form': form, 'disciplina': disciplina})

# Consultar dados de uma disciplina
def consultar_disciplina(request, disciplina_id):
    disciplina = get_object_or_404(Disciplina, pk=disciplina_id)
    return render(request, 'core/consultar_disciplina.html', {'disciplina': disciplina})

# Excluir disciplina
def excluir_disciplina(request, disciplina_id):
    disciplina = get_object_or_404(Disciplina, pk=disciplina_id)
    disciplina.delete()
    return redirect('gerenciar_disciplinas')

# Cadastrar disciplina
def cadastrar_disciplina(request):
    if request.method == 'POST':
        form = DisciplinaForm(request.POST)
        if form.is_valid():
            form.save()  # Salva a nova disciplina
            return redirect('gerenciar_disciplinas')  # Redireciona para o gerenciamento de disciplinas
    else:
        form = DisciplinaForm()  # Exibe o formulário vazio
    return render(request, 'core/cadastrar_disciplina.html', {'form': form})

# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\__init__.py
# --------------------------------------------------



# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0001_initial.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 17:47

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_chamada', models.IntegerField()),
                ('nome', models.CharField(max_length=100)),
                ('rm', models.CharField(max_length=20, unique=True)),
                ('ra_rg', models.CharField(max_length=20)),
                ('data_nascimento', models.DateField()),
                ('status', models.CharField(choices=[('ativo', 'Ativo'), ('transferido', 'Transferido'), ('suplente', 'Suplente')], max_length=20)),
            ],
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0002_professor.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('quantidade_aulas_previstas', models.IntegerField()),
                ('quantidade_aulas_dadas', models.IntegerField()),
            ],
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0003_rename_quantidade_aulas_dadas_professor_aulas_dadas_bimestre1_and_more.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:09

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_professor'),
    ]

    operations = [
        migrations.RenameField(
            model_name='professor',
            old_name='quantidade_aulas_dadas',
            new_name='aulas_dadas_bimestre1',
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_dadas_bimestre2',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_dadas_bimestre3',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_dadas_bimestre4',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0004_disciplina.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_rename_quantidade_aulas_dadas_professor_aulas_dadas_bimestre1_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplinas', to='core.professor')),
            ],
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0005_remove_professor_quantidade_aulas_previstas_and_more.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_disciplina'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='professor',
            name='quantidade_aulas_previstas',
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_previstas_bimestre1',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_previstas_bimestre2',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_previstas_bimestre3',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='professor',
            name='aulas_previstas_bimestre4',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='professor',
            name='aulas_dadas_bimestre1',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='professor',
            name='aulas_dadas_bimestre2',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='professor',
            name='aulas_dadas_bimestre3',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='professor',
            name='aulas_dadas_bimestre4',
            field=models.IntegerField(default=0),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0006_turma.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_remove_professor_quantidade_aulas_previstas_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Turma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=10)),
                ('ano', models.IntegerField()),
                ('alunos', models.ManyToManyField(to='core.aluno')),
                ('professores', models.ManyToManyField(to='core.professor')),
            ],
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0007_nota.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:25

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0006_turma'),
    ]

    operations = [
        migrations.CreateModel(
            name='Nota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota_bimestre1', models.FloatField(default=0)),
                ('nota_bimestre2', models.FloatField(default=0)),
                ('nota_bimestre3', models.FloatField(default=0)),
                ('nota_bimestre4', models.FloatField(default=0)),
                ('media_final', models.FloatField(default=0)),
                ('faltas', models.IntegerField(default=0)),
                ('status_final', models.CharField(choices=[('P', 'Promovido'), ('PC', 'Promovido pelo conselho'), ('T', 'Transferido'), ('R', 'Retido'), ('NC', 'Não Comparecimento'), ('AB', 'Abandono'), ('RC', 'Reclassificado'), ('RM', 'Remanejado')], default='P', max_length=2)),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.aluno')),
                ('disciplina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.disciplina')),
            ],
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0008_rename_faltas_nota_faltas_bimestre1_and_more.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-10-26 18:27

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_nota'),
    ]

    operations = [
        migrations.RenameField(
            model_name='nota',
            old_name='faltas',
            new_name='faltas_bimestre1',
        ),
        migrations.AddField(
            model_name='nota',
            name='faltas_bimestre2',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='nota',
            name='faltas_bimestre3',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='nota',
            name='faltas_bimestre4',
            field=models.IntegerField(default=0),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0009_remove_aluno_numero_chamada_alter_aluno_ra_rg_and_more.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-07 18:08

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0008_rename_faltas_nota_faltas_bimestre1_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='aluno',
            name='numero_chamada',
        ),
        migrations.AlterField(
            model_name='aluno',
            name='ra_rg',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='aluno',
            name='status',
            field=models.CharField(choices=[('ativo', 'Ativo'), ('transferido', 'Transferido'), ('suplente', 'Suplente')], default='ativo', max_length=11),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0010_aluno_email_responsavel_aluno_telefone_responsavel.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-07 22:42

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_remove_aluno_numero_chamada_alter_aluno_ra_rg_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='aluno',
            name='email_responsavel',
            field=models.EmailField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='aluno',
            name='telefone_responsavel',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0011_alter_turma_options_and_more.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-08 00:38

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0010_aluno_email_responsavel_aluno_telefone_responsavel'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='turma',
            options={'verbose_name': 'Turma', 'verbose_name_plural': 'Turmas'},
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_dadas_bimestre1',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_dadas_bimestre2',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_dadas_bimestre3',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_dadas_bimestre4',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_previstas_bimestre1',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_previstas_bimestre2',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_previstas_bimestre3',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='aulas_previstas_bimestre4',
        ),
        migrations.RemoveField(
            model_name='turma',
            name='nome',
        ),
        migrations.AddField(
            model_name='professor',
            name='disciplina',
            field=models.CharField(default='Indefinido', max_length=255),
        ),
        migrations.AddField(
            model_name='turma',
            name='classe',
            field=models.CharField(default='Indefinido', max_length=5),
        ),
        migrations.AlterField(
            model_name='professor',
            name='nome',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='turma',
            name='alunos',
            field=models.ManyToManyField(related_name='turmas', to='core.aluno'),
        ),
        migrations.AlterField(
            model_name='turma',
            name='ano',
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name='turma',
            name='professores',
            field=models.ManyToManyField(related_name='turmas', to='core.professor'),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0012_professor_email_professor_telefone.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-08 16:40

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0011_alter_turma_options_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='professor',
            name='email',
            field=models.EmailField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='professor',
            name='telefone',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0013_remove_disciplina_professor_and_more.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-08 16:47

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0012_professor_email_professor_telefone'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='disciplina',
            name='professor',
        ),
        migrations.RemoveField(
            model_name='professor',
            name='disciplina',
        ),
        migrations.AddField(
            model_name='professor',
            name='disciplinas',
            field=models.ManyToManyField(related_name='professores', to='core.disciplina'),
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0014_professor_user.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-09 19:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0013_remove_disciplina_professor_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='professor',
            name='user',
            field=models.OneToOneField(default=2, on_delete=django.db.models.deletion.CASCADE, related_name='professor_profile', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\0015_aluno_user.py
# --------------------------------------------------

# Generated by Django 5.1.2 on 2024-11-10 14:57

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_professor_user'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='aluno',
            name='user',
            field=models.OneToOneField(default=13, on_delete=django.db.models.deletion.CASCADE, related_name='aluno_profile', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
    ]


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\migrations\__init__.py
# --------------------------------------------------



# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\aluno.html
# --------------------------------------------------

<!-- core/templates/core/aluno.html -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultar Notas - Aluno</title>
</head>
<body>
    <h1>Bem-vindo ao Sistema de Boletim Escolar</h1>

    <nav>
        <ul>
            <li><a href="{% url 'index' %}">Voltar</a></li>
        </ul>
    </nav>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\aluno_home.html
# --------------------------------------------------

{% load static %}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página do Aluno</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Bem-vindo, {{ user.aluno_profile.nome }}!</h1>
        <div class="text-center mt-3">
            <a href="{% url 'logout_aluno' %}" class="btn btn-danger">Sair</a> <!-- Corrige o nome da URL -->
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\cadastrar_aluno.html
# --------------------------------------------------

{% load static %}
{% load widget_tweaks %}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastrar Aluno</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Cadastrar Aluno</h1>
        {% if messages %}
        <div class="alert alert-danger mt-3">
            <ul>
                {% for message in messages %}
                <li>{{ message }}</li>
                {% endfor %}
            </ul>
        </div>
        {% endif %}
        <form method="post" class="needs-validation" novalidate>
            {% csrf_token %}
            <div class="mb-3">
                <label for="id_nome" class="form-label">Nome</label>
                {{ form.nome|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="id_rm" class="form-label">RM</label>
                {{ form.rm|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="id_ra_rg" class="form-label">RA / RG</label>
                {{ form.ra_rg|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="id_data_nascimento" class="form-label">Data de Nascimento</label>
                {{ form.data_nascimento|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="id_status" class="form-label">Status</label>
                {{ form.status|add_class:"form-select" }}
            </div>
            <div class="mb-3">
                <label for="id_email_responsavel" class="form-label">E-mail do Responsável</label>
                {{ form.email_responsavel|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="id_telefone_responsavel" class="form-label">Telefone do Responsável</label>
                {{ form.telefone_responsavel|add_class:"form-control" }}
            </div>
            <!-- Campo de username (campo gerado automaticamente) -->
            <div class="mb-3">
                <label for="id_username" class="form-label">Nome de Usuário</label>
                {{ user_form.username|add_class:"form-control" }}
            </div>
            <!-- Campo de senha -->
            <div class="mb-3">
                <label for="id_password1" class="form-label">Senha</label>
                {{ user_form.password1|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="id_password2" class="form-label">Confirmar Senha</label>
                {{ user_form.password2|add_class:"form-control" }}
            </div>
            <div class="d-flex justify-content-between mt-3">
                <button type="submit" class="btn btn-primary">Salvar</button>
                <a href="{% url 'gerenciar_alunos' %}" class="btn btn-secondary">Voltar</a>
            </div>
        </form>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var rm = document.getElementById('id_rm');
            var username = document.getElementById('id_username');
            var senha = document.getElementById('id_password1');
            var confirmarSenha = document.getElementById('id_password2');
            var senhaPadrao = 'aluno123';

            rm.addEventListener('input', function() {
                var rmValue = rm.value.trim();
                if (rmValue) {
                    username.value = rmValue;
                    if (!senha.value) {
                        senha.value = senhaPadrao;
                        confirmarSenha.value = senhaPadrao;
                    }
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\cadastrar_disciplina.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastrar Disciplina</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Cadastrar Nova Disciplina</h1>

        <form method="POST">
            {% csrf_token %}
            {{ form.as_p }} <!-- Exibe os campos do formulário -->
            
            <button type="submit" class="btn btn-primary">Cadastrar</button>
            <a href="{% url 'gerenciar_disciplinas' %}" class="btn btn-secondary">Voltar</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\cadastrar_professor.html
# --------------------------------------------------

    <!-- boletim_escolar_v2/core/templates/core/cadastrar_professor.html-->

{% load static %}
{% load widget_tweaks %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastrar Professor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Cadastrar Professor</h1>
    
        <form method="post" class="needs-validation" novalidate>
            {% csrf_token %}
        
            <!-- Outros campos de professor -->
            <div class="mb-3">
                <label for="id_nome" class="form-label">Nome</label>
                {{ form.nome|add_class:"form-control" }}
            </div>
        
            <div class="mb-3">
                <label for="id_email" class="form-label">E-mail</label>
                {{ form.email|add_class:"form-control" }}
            </div>
        
            <div class="mb-3">
                <label for="id_telefone" class="form-label">Telefone</label>
                {{ form.telefone|add_class:"form-control" }}
            </div>
        
            <div class="mb-3">
                <label for="id_disciplinas" class="form-label">Disciplinas</label>
                {{ form.disciplinas }}
            </div>
        
            <!-- Campo de username (campo gerado automaticamente) -->
            <div class="mb-3">
                <label for="id_username" class="form-label">Nome de Usuário</label>
                {{ user_form.username|add_class:"form-control" }}
            </div>
        
            <!-- Campo de senha -->
            <div class="mb-3">
                <label for="id_password1" class="form-label">Senha</label>
                {{ user_form.password1|add_class:"form-control" }}
            </div>
        
            <div class="mb-3">
                <label for="id_password2" class="form-label">Confirmar Senha</label>
                {{ user_form.password2|add_class:"form-control" }}
            </div>
        
            <div class="d-flex justify-content-between mt-3">
                <button type="submit" class="btn btn-primary">Cadastrar</button>
                <a href="{% url 'gerenciar_professores' %}" class="btn btn-secondary">Voltar</a>
            </div>
        </form>
        
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var nome = document.getElementById('id_nome');
            var username = document.getElementById('id_username');
            var senha = document.getElementById('id_password1');
            var confirmarSenha = document.getElementById('id_password2');
            var contador = 1;

            var senhaPadrao = 'professor123';

            nome.addEventListener('input', function() {
                var nomeCompleto = nome.value.trim();
                if (nomeCompleto) {
                    var partesNome = nomeCompleto.split(" ");
                    var usernameBase = partesNome[0].toLowerCase() + partesNome[partesNome.length - 1].toLowerCase();

                    // Adiciona um número se o username já existir
                    var usernameGerado = usernameBase + contador;

                    // Aqui você pode verificar se o username já existe em seu sistema
                    // Se já existir, incrementa o contador
                    while (verificarUsernameExistente(usernameGerado)) {
                        contador++;
                        usernameGerado = usernameBase + contador;
                    }

                    // Preenche o campo de username com o nome gerado
                    username.value = usernameGerado;

                    // Preenche a senha apenas se ela estiver vazia
                    if (!senha.value) {
                        senha.value = senhaPadrao;
                        confirmarSenha.value = senhaPadrao;
                    }
                }
            });

            // Função fictícia para verificar se o username já existe no sistema
            // No caso de um sistema real, você precisaria fazer uma requisição Ajax para verificar se o username já existe no backend
            function verificarUsernameExistente(username) {
                // Aqui você pode adicionar a lógica para verificar se o username já existe.
                // Por exemplo, enviar uma requisição AJAX para o servidor Django e verificar.
                // Retorna `false` para simular que o username não existe
                return false;
            }
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\consultar_aluno.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultar Aluno</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Consultar Aluno - {{ aluno.nome }}</h1>

        <div class="mb-3">
            <p><strong>Nome:</strong> {{ aluno.nome }}</p>
        </div>
        <div class="mb-3">
            <p><strong>Data de Nascimento:</strong> {{ aluno.data_nascimento }}</p>
        </div>
        <div class="mb-3">
            <p><strong>Status:</strong> {{ aluno.get_status_display }}</p>
        </div>
        <div class="mb-3">
            <p><strong>RM:</strong> {{ aluno.rm }}</p>
        </div>

        <!-- Novos campos -->
        <div class="mb-3">
            <p><strong>E-mail do Responsável:</strong> {{ aluno.email_responsavel }}</p>
        </div>
        <div class="mb-3">
            <p><strong>Telefone do Responsável:</strong> {{ aluno.telefone_responsavel }}</p>
        </div>

        <!-- Botão "Voltar" alinhado à esquerda -->
        <div class="d-flex justify-content-start mt-4">
            <a href="{% url 'gerenciar_alunos' %}" class="btn btn-secondary">Voltar</a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\consultar_disciplina.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultar Disciplina</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Consultar Disciplina - {{ disciplina.nome }}</h1>

        <div class="mb-3">
            <p><strong>Nome:</strong> {{ disciplina.nome }}</p>
        </div>

        <a href="{% url 'gerenciar_disciplinas' %}" class="btn btn-secondary">Voltar</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\consultar_professor.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultar Professor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Consultar Professor - {{ professor.nome }}</h1>

        <div class="mb-3">
            <p><strong>Nome:</strong> {{ professor.nome }}</p>
        </div>
        <div class="mb-3">
            <p><strong>Username:</strong> {{ professor.user.username }}</p> <!-- Exibe o username -->
        </div>
        <div class="mb-3">
            <p><strong>E-mail:</strong> {{ professor.email }}</p>
        </div>
        <div class="mb-3">
            <p><strong>Telefone:</strong> {{ professor.telefone }}</p>
        </div>

        <div class="mb-3">
            <p><strong>Disciplinas Lecionadas:</strong> 
                {% for disciplina in professor.disciplinas.all %}
                    {{ disciplina.nome }}{% if not forloop.last %}, {% endif %}
                {% empty %}
                    Nenhuma disciplina
                {% endfor %}
            </p>
        </div>

        <div class="mb-3">
            <p><strong>Data de Criação:</strong> {{ professor.user.date_joined|date:"d/m/Y" }}</p> <!-- Exibe a data de criação da conta -->
        </div>

        <!-- Botão "Voltar" alinhado à esquerda -->
        <div class="d-flex justify-content-start mt-4">
            <a href="{% url 'gerenciar_professores' %}" class="btn btn-secondary">Voltar</a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\consultar_turma.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultar Turma</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Consultar Turma: {{ turma.ano }} - {{ turma.classe }}</h1>

        <!-- Botões de Navegação -->
        <div class="d-flex justify-content-between mb-4">
            <a href="{% url 'gerenciar_turmas' %}" class="btn btn-secondary">Voltar</a>
        </div>

        <!-- Exibe informações da turma -->
        <div class="mb-4">
            <h3>Detalhes da Turma</h3>
            <p><strong>Ano:</strong> {{ turma.ano }}</p>
            <p><strong>Classe:</strong> {{ turma.classe }}</p>
        </div>

        <!-- Tabela de Alunos -->
        <div class="mb-3">
            <h4>Alunos</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Nome</th>
                        <th>Matrícula</th>
                        <th>Data de Nascimento</th>
                    </tr>
                </thead>
                <tbody>
                    {% for aluno in turma.alunos.all %}
                        <tr>
                            <td>{{ forloop.counter }}</td>
                            <td>{{ aluno.nome }}</td>
                            <td>{{ aluno.rm }}</td>
                            <td>{{ aluno.data_nascimento|date:"d/m/Y" }}</td>
                        </tr>
                    {% empty %}
                        <tr>
                            <td colspan="4">Nenhum aluno cadastrado na turma</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Tabela de Professores -->
        <div class="mb-3">
            <h4>Professores</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Nome</th>
                        <th>Disciplina</th>
                    </tr>
                </thead>
                <tbody>
                    {% for professor in turma.professores.all %}
                        <tr>
                            <td>{{ forloop.counter }}</td>
                            <td>{{ professor.nome }}</td>
                            <td>
                                <!-- Exibir as disciplinas do professor -->
                                {% for disciplina in professor.disciplinas.all %}
                                    {{ disciplina.nome }}{% if not forloop.last %}, {% endif %}
                                {% endfor %}
                            </td>
                        </tr>
                    {% empty %}
                        <tr>
                            <td colspan="3">Nenhum professor cadastrado nesta turma</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\criar_turma.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criar Nova Turma</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Criar Nova Turma</h1>

        {% if form.errors %}
            <div class="alert alert-danger">
                <strong>Erro(s) no formulário:</strong>
                <ul>
                {% for field in form %}
                    {% for error in field.errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                {% endfor %}
                </ul>
            </div>
        {% endif %}

        <form method="POST">
            {% csrf_token %}

            <div class="d-flex justify-content-between mb-4">
                <button type="submit" class="btn btn-success">Salvar</button>
                <a href="{% url 'gerenciar_turmas' %}" class="btn btn-secondary">Voltar</a>
            </div>

            <div class="mb-3">
                <label for="ano" class="form-label">Ano</label>
                <input type="text" class="form-control" id="ano" name="ano" required>
            </div>

            <div class="mb-3">
                <label for="classe" class="form-label">Classe</label>
                <input type="text" class="form-control" id="classe" name="classe" required>
            </div>

            <div class="mb-3">
                <label for="buscar_aluno" class="form-label">Buscar Aluno</label>
                <input type="text" class="form-control" id="buscar_aluno" placeholder="Digite o nome ou RM do aluno para buscar...">
            </div>

            <div class="mb-3">
                <label for="alunos" class="form-label">Alunos</label>
                <table class="table table-hover table-striped" id="tabela_alunos">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Nome</th>
                            <th>Matrícula</th>
                            <th>Data Nascimento</th>
                            <th>Classes</th>
                            <th>Selecionar</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for aluno in alunos|dictsort:"nome" %}
                            <tr class="aluno-row">
                                <td>{{ forloop.counter }}</td>
                                <td>{{ aluno.nome }}</td>
                                <td>{{ aluno.rm }}</td>
                                <td>{{ aluno.data_nascimento|date:"d/m/Y" }}</td>
                                <td>
                                    {% if aluno.turmas.all %}
                                        {% for turma in aluno.turmas.all %}
                                            {{ turma.classe }} ({{ turma.ano }}){% if not forloop.last %}, {% endif %}
                                        {% endfor %}
                                    {% else %}
                                        Nenhuma
                                    {% endif %}
                                </td>
                                <td>
                                    <input class="form-check-input" type="checkbox" name="alunos" value="{{ aluno.id }}" id="aluno_{{ aluno.id }}">
                                </td>
                            </tr>
                        {% empty %}
                            <tr>
                                <td colspan="6">Nenhum aluno encontrado</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <!-- Tabela de Professores permanece igual -->
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.getElementById("buscar_aluno").addEventListener("input", function() {
            var query = this.value.toLowerCase();
            var rows = document.querySelectorAll("#tabela_alunos .aluno-row");

            rows.forEach(function(row) {
                var nomeAluno = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
                var rmAluno = row.querySelector("td:nth-child(3)").textContent.toLowerCase();
                if (nomeAluno.includes(query) || rmAluno.includes(query)) {
                    row.style.display = ""; 
                } else {
                    row.style.display = "none"; 
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\detalhes_turma.html
# --------------------------------------------------

{% load static %}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalhes da Turma</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
    <style>
        .table-custom th, .table-custom td {
            text-align: center;
            vertical-align: middle;
        }
        .table-custom th {
            background-color: #0066cc;
            color: white;
        }
        .table-custom td {
            background-color: #f9f9f9;
        }
        .table-custom tr:hover td {
            background-color: #e6f7ff;
        }
        .status-final {
            width: 200px; /* Aumentar a largura para evitar corte */
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Turma: {{ turma.ano }} - {{ turma.classe }}</h1>
        <form method="post">
            {% csrf_token %}
            <table class="table table-striped table-bordered table-custom">
                <thead class="table-primary">
                    <tr>
                        <th>Nome do Aluno</th>
                        <th>Nota 1º Bimestre</th>
                        <th>Faltas 1º Bimestre</th>
                        <th>Nota 2º Bimestre</th>
                        <th>Faltas 2º Bimestre</th>
                        <th>Nota 3º Bimestre</th>
                        <th>Faltas 3º Bimestre</th>
                        <th>Nota 4º Bimestre</th>
                        <th>Faltas 4º Bimestre</th>
                        <th class="status-final">Status Final</th>
                    </tr>
                </thead>
                <tbody>
                    {% for aluno in alunos %}
                    <tr>
                        <td>{{ aluno.nome }}</td>
                        <td><input type="number" name="nota_bimestre1_{{ aluno.id }}" value="{{ aluno.nota_set.first.nota_bimestre1 }}" class="form-control"></td>
                        <td><input type="number" name="faltas_bimestre1_{{ aluno.id }}" value="{{ aluno.nota_set.first.faltas_bimestre1 }}" class="form-control"></td>
                        <td><input type="number" name="nota_bimestre2_{{ aluno.id }}" value="{{ aluno.nota_set.first.nota_bimestre2 }}" class="form-control"></td>
                        <td><input type="number" name="faltas_bimestre2_{{ aluno.id }}" value="{{ aluno.nota_set.first.faltas_bimestre2 }}" class="form-control"></td>
                        <td><input type="number" name="nota_bimestre3_{{ aluno.id }}" value="{{ aluno.nota_set.first.nota_bimestre3 }}" class="form-control"></td>
                        <td><input type="number" name="faltas_bimestre3_{{ aluno.id }}" value="{{ aluno.nota_set.first.faltas_bimestre3 }}" class="form-control"></td>
                        <td><input type="number" name="nota_bimestre4_{{ aluno.id }}" value="{{ aluno.nota_set.first.nota_bimestre4 }}" class="form-control"></td>
                        <td><input type="number" name="faltas_bimestre4_{{ aluno.id }}" value="{{ aluno.nota_set.first.faltas_bimestre4 }}" class="form-control"></td>
                        <td class="status-final">
                            <select name="status_final_{{ aluno.id }}" class="form-select">
                                {% for key, value in aluno.nota_set.first.STATUS_CHOICES %}
                                <option value="{{ key }}" {% if aluno.nota_set.first.status_final == key %}selected{% endif %}>{{ value }}</option>
                                {% endfor %}
                            </select>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="10" class="text-center">Nenhum aluno cadastrado nesta turma.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
            <button type="submit" class="btn btn-primary">Salvar Notas</button>
        </form>
        <a href="{% url 'professor_home' %}" class="btn btn-secondary mt-3">Voltar</a>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\editar_aluno.html
# --------------------------------------------------

{% load static %}
{% load widget_tweaks %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Aluno</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Editar Aluno - {{ aluno.nome }}</h1>

        <form method="post" class="needs-validation" novalidate>
            {% csrf_token %}
            
            <div class="mb-3">
                <label for="id_nome" class="form-label">Nome</label>
                {{ form.nome|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_rm" class="form-label">RM</label>
                {{ form.rm|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_ra_rg" class="form-label">RA / RG</label>
                {{ form.ra_rg|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_data_nascimento" class="form-label">Data de Nascimento</label>
                {{ form.data_nascimento|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_status" class="form-label">Status</label>
                {{ form.status|add_class:"form-select" }}
            </div>

            <!-- Novos campos -->
            <div class="mb-3">
                <label for="id_email_responsavel" class="form-label">E-mail do Responsável</label>
                {{ form.email_responsavel|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_telefone_responsavel" class="form-label">Telefone do Responsável</label>
                {{ form.telefone_responsavel|add_class:"form-control" }}
            </div>

            <!-- Ajuste dos botões -->
            <div class="d-flex justify-content-between mt-3">
                <!-- Botão "Salvar Alterações" à esquerda -->
                <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                
                <!-- Botão "Voltar" à direita -->
                <a href="{% url 'gerenciar_alunos' %}" class="btn btn-secondary">Voltar</a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\editar_disciplina.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Disciplina</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Editar Disciplina - {{ disciplina.nome }}</h1>

        <form method="POST">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit" class="btn btn-success">Salvar Alterações</button>
            <a href="{% url 'gerenciar_disciplinas' %}" class="btn btn-secondary">Voltar</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\editar_professor.html
# --------------------------------------------------

{% load static %}
{% load widget_tweaks %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Professor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Editar Professor - {{ professor.nome }}</h1>

        <form method="post" class="needs-validation" novalidate>
            {% csrf_token %}
            
            <div class="mb-3">
                <label for="id_nome" class="form-label">Nome</label>
                {{ form.nome|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_email" class="form-label">Email</label>
                {{ form.email|add_class:"form-control" }}
            </div>

            <div class="mb-3">
                <label for="id_telefone" class="form-label">Telefone</label>
                {{ form.telefone|add_class:"form-control" }}
            </div>

            <!-- Seção de Disciplinas -->
            <div class="mb-3">
                <label class="form-label">Disciplinas</label>
                <div class="form-check">
                    {% for disciplina in form.disciplinas %}
                        <div class="form-check mb-1">
                            {{ disciplina.tag }}
                            <label class="form-check-label">{{ disciplina.choice_label }}</label>
                        </div>
                    {% endfor %}
                </div>
            </div>

            <!-- Ajuste dos botões -->
            <div class="d-flex justify-content-between mt-3">
                <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                <a href="{% url 'gerenciar_professores' %}" class="btn btn-secondary">Voltar</a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\editar_turma.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Turma</title>

    <!-- Link do CSS do Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Link do seu CSS personalizado -->
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Editar Turma</h1>

        <!-- Botões no início do formulário -->
        <form method="POST">
            {% csrf_token %}
            <div class="d-flex justify-content-between mb-4">
                <button type="submit" class="btn btn-success">Salvar Alterações</button>
                <a href="{% url 'gerenciar_turmas' %}" class="btn btn-secondary">Voltar</a>
            </div>

            <!-- Campos para Ano e Classe -->
            <div class="mb-3">
                <label for="ano" class="form-label">Ano</label>
                <input type="text" class="form-control" id="ano" name="ano" value="{{ form.ano.value }}" required>
            </div>

            <div class="mb-3">
                <label for="classe" class="form-label">Classe</label>
                <input type="text" class="form-control" id="classe" name="classe" value="{{ form.classe.value }}" required>
            </div>

            <!-- Campo de busca de aluno -->
            <div class="mb-3">
                <label for="buscar_aluno" class="form-label">Buscar Aluno</label>
                <input type="text" class="form-control" id="buscar_aluno" placeholder="Digite o nome ou RM do aluno para buscar...">
            </div>

            <!-- Tabela de Alunos -->
            <div class="mb-3">
                <label for="alunos" class="form-label">Alunos</label>
                <table class="table table-hover table-striped" id="tabela_alunos">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Nome</th>
                            <th>Matrícula</th>
                            <th>Data Nascimento</th>
                            <th>Classes</th>
                            <th>Selecionar</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for aluno in alunos|dictsort:"nome" %}
                            <tr class="aluno-row">
                                <td>{{ forloop.counter }}</td>
                                <td>{{ aluno.nome }}</td>
                                <td>{{ aluno.rm }}</td>
                                <td>{{ aluno.data_nascimento|date:"d/m/Y" }}</td>
                                <td>
                                    {% if aluno.turmas.all %}
                                        {% for turma in aluno.turmas.all %}
                                            {{ turma.classe }} ({{ turma.ano }}){% if not forloop.last %}, {% endif %}
                                        {% endfor %}
                                    {% else %}
                                        Nenhuma
                                    {% endif %}
                                </td>
                                <td>
                                    <input class="form-check-input" type="checkbox" name="alunos" value="{{ aluno.id }}" id="aluno_{{ aluno.id }}" {% if aluno in turma.alunos.all %}checked{% endif %}>
                                </td>
                            </tr>
                        {% empty %}
                            <tr>
                                <td colspan="6">Nenhum aluno encontrado</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <!-- Tabela de Professores -->
            <div class="mb-3">
                <label for="professores" class="form-label">Professores</label>
                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Nome</th>
                            <th>Disciplina</th>
                            <th>Selecionar</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for professor in professores|dictsort:"nome" %}
                            <tr>
                                <td>{{ forloop.counter }}</td>
                                <td>{{ professor.nome }}</td>
                                <td>
                                    <!-- Exibir as disciplinas do professor -->
                                    {% for disciplina in professor.disciplinas.all %}
                                        {{ disciplina.nome }}{% if not forloop.last %}, {% endif %}
                                    {% endfor %}
                                </td>
                                <td>
                                    <input class="form-check-input" type="checkbox" name="professores" value="{{ professor.id }}" id="professor_{{ professor.id }}" {% if professor in turma.professores.all %}checked{% endif %}>
                                </td>
                            </tr>
                        {% empty %}
                            <tr>
                                <td colspan="4">Nenhum professor encontrado</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

        </form>
    </div>

    <!-- Script do Bootstrap para funcionalidades JS (opcional) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Script para busca de aluno (nome ou RM) -->
    <script>
        document.getElementById("buscar_aluno").addEventListener("input", function() {
            var query = this.value.toLowerCase();
            var rows = document.querySelectorAll("#tabela_alunos .aluno-row");

            rows.forEach(function(row) {
                var nomeAluno = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
                var rmAluno = row.querySelector("td:nth-child(3)").textContent.toLowerCase();
                if (nomeAluno.includes(query) || rmAluno.includes(query)) {
                    row.style.display = ""; // Exibe a linha
                } else {
                    row.style.display = "none"; // Esconde a linha
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\gerenciar_alunos.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Cadastros - Secretaria</title>

    <!-- Link do CSS do Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Link do seu CSS personalizado -->
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Gerenciamento de Cadastros - Secretaria</h1>

        <h2 class="text-center mb-4">Gerenciar Alunos</h2>

        <div class="d-flex justify-content-between mb-3">
            <a href="{% url 'cadastrar_aluno' %}" class="btn btn-primary">Cadastrar Novo Aluno</a>
            
            <!-- Lacuna de busca com ID para JS -->
            <input type="text" id="buscar_aluno" class="form-control" placeholder="Buscar Aluno" style="max-width: 200px;">

            <a href="{% url 'secretaria' %}" class="btn btn-secondary">Voltar</a>
        </div>

        <table class="table table-striped table-bordered table-custom" id="tabela_alunos">
            <thead class="table-primary">
                <tr>
                    <th>Nome</th>
                    <th>RM</th> <!-- Nova coluna para RM -->
                    <th>Data de Nascimento</th>
                    <th>Status</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {% for aluno in alunos %}
                <tr class="aluno-row">
                    <td>{{ aluno.nome }}</td>
                    <td>{{ aluno.rm }}</td> <!-- Exibe o RM do aluno -->
                    <td>{{ aluno.data_nascimento|date:"d/m/Y" }}</td>
                    <td>{{ aluno.get_status_display }}</td>
                    <td>
                        <a href="{% url 'editar_aluno' aluno.id %}" class="btn btn-warning btn-sm">Editar</a>
                        <a href="{% url 'consultar_aluno' aluno.id %}" class="btn btn-info btn-sm">Consultar</a>
                        
                        <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal{{ aluno.id }}">Excluir</button>

                        <div class="modal fade" id="confirmDeleteModal{{ aluno.id }}" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Exclusão</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                                    </div>
                                    <div class="modal-body">
                                        Tem certeza de que deseja excluir o aluno {{ aluno.nome }}? Essa ação não pode ser desfeita.
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                        <a href="{% url 'excluir_aluno' aluno.id %}" class="btn btn-danger">Confirmar Exclusão</a>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Script do Bootstrap para funcionalidades JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Script de busca dinâmica -->
    <script>
        document.getElementById("buscar_aluno").addEventListener("input", function() {
            var query = this.value.toLowerCase();
            var rows = document.querySelectorAll("#tabela_alunos .aluno-row");

            rows.forEach(function(row) {
                var nomeAluno = row.querySelector("td:nth-child(1)").textContent.toLowerCase();
                if (nomeAluno.includes(query)) {
                    row.style.display = ""; 
                } else {
                    row.style.display = "none"; 
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\gerenciar_disciplinas.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciar Disciplinas - Secretaria</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Gerenciamento de Disciplinas - Secretaria</h1>
        <h1 class="text-center mb-4">Gerenciar Disciplinas</h1>

        <div class="d-flex justify-content-between mb-3">
            <a href="{% url 'cadastrar_disciplina' %}" class="btn btn-primary">Cadastrar Nova Disciplina</a>
            
            <input type="text" id="buscar_disciplina" class="form-control" placeholder="Buscar Disciplina" style="max-width: 200px;">

            <a href="{% url 'secretaria' %}" class="btn btn-secondary">Voltar</a>
        </div>

        <table class="table table-striped table-bordered table-custom" id="tabela_disciplinas">
            <thead class="table-primary">
                <tr>
                    <th>Nome</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {% for disciplina in disciplinas %}
                <tr class="disciplina-row">
                    <td>{{ disciplina.nome }}</td>
                    <td>
                        <a href="{% url 'editar_disciplina' disciplina.id %}" class="btn btn-warning btn-sm">Editar</a>
                        <a href="{% url 'consultar_disciplina' disciplina.id %}" class="btn btn-info btn-sm">Consultar</a>
                        
                        <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal{{ disciplina.id }}">Excluir</button>

                        <div class="modal fade" id="confirmDeleteModal{{ disciplina.id }}" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Exclusão</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                                    </div>
                                    <div class="modal-body">
                                        Tem certeza de que deseja excluir a disciplina {{ disciplina.nome }}? Essa ação não pode ser desfeita.
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                        <a href="{% url 'excluir_disciplina' disciplina.id %}" class="btn btn-danger">Confirmar Exclusão</a>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.getElementById("buscar_disciplina").addEventListener("input", function() {
            var query = this.value.toLowerCase();
            var rows = document.querySelectorAll("#tabela_disciplinas .disciplina-row");

            rows.forEach(function(row) {
                var nomeDisciplina = row.querySelector("td:nth-child(1)").textContent.toLowerCase();
                if (nomeDisciplina.includes(query)) {
                    row.style.display = ""; 
                } else {
                    row.style.display = "none"; 
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\gerenciar_professores.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Professores - Secretaria</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Gerenciamento de Professores</h1>

        <div class="d-flex justify-content-between mb-3">
            <a href="{% url 'cadastrar_professor' %}" class="btn btn-primary">Cadastrar Novo Professor</a>
            
            <input type="text" id="buscar_professor" class="form-control" placeholder="Buscar Professor" style="max-width: 200px;">

            <a href="{% url 'secretaria' %}" class="btn btn-secondary">Voltar</a>
        </div>

        <table class="table table-striped table-bordered table-custom" id="tabela_professores">
            <thead class="table-primary">
                <tr>
                    <th>Nome</th>
                    <th>Username</th>  <!-- Nova coluna para o username -->
                    <th>Disciplina</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {% for professor in professores %}
                <tr class="professor-row">
                    <td>{{ professor.nome }}</td>
                    <td>{{ professor.user.username }}</td>  <!-- Exibe o username do professor -->
                    <td>
                        {% for disciplina in professor.disciplinas.all %}
                            {{ disciplina.nome }}{% if not forloop.last %}, {% endif %}
                        {% empty %}
                            Nenhuma disciplina
                        {% endfor %}
                    </td>
                    <td>
                        <a href="{% url 'editar_professor' professor.id %}" class="btn btn-warning btn-sm">Editar</a>
                        <a href="{% url 'consultar_professor' professor.id %}" class="btn btn-info btn-sm">Consultar</a>
                        
                        <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal{{ professor.id }}">Excluir</button>

                        <div class="modal fade" id="confirmDeleteModal{{ professor.id }}" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Exclusão</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                                    </div>
                                    <div class="modal-body">
                                        Tem certeza de que deseja excluir o professor {{ professor.nome }}? Essa ação não pode ser desfeita.
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                        <a href="{% url 'excluir_professor' professor.id %}" class="btn btn-danger">Confirmar Exclusão</a>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.getElementById("buscar_professor").addEventListener("input", function() {
            var query = this.value.toLowerCase();
            var rows = document.querySelectorAll("#tabela_professores .professor-row");

            rows.forEach(function(row) {
                var nomeProfessor = row.querySelector("td:nth-child(1)").textContent.toLowerCase();
                if (nomeProfessor.includes(query)) {
                    row.style.display = ""; 
                } else {
                    row.style.display = "none"; 
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\gerenciar_turmas.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Turmas - Secretaria</title>

    <!-- Link do CSS do Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Link do seu CSS personalizado -->
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Gerenciamento de Turmas - Secretaria</h1>

        <h2 class="text-center mb-4">Gerenciar Turmas</h2>

        <div class="d-flex justify-content-between mb-3">
            <!-- Link "Cadastrar Nova Turma" como botão alinhado -->
            <a href="{% url 'criar_turma' %}" class="btn btn-primary">Cadastrar Nova Turma</a>

            <!-- Lacuna de busca local para turmas -->
            <input type="text" id="buscar_turma" class="form-control w-50" placeholder="Buscar Turma">
            
            <a href="{% url 'secretaria' %}" class="btn btn-secondary">Voltar</a>
        </div>

        <table class="table table-striped table-bordered table-custom" id="tabela_turmas">
            <thead class="table-primary">
                <tr>
                    <th>Ano</th>
                    <th>Classe</th>
                    <th>Alunos</th>
                    <th>Professores</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {% for turma in turmas %}
                <tr class="turma-row">
                    <td>{{ turma.ano }}</td>
                    <td>{{ turma.classe }}</td>
                    <td>
                        {% if turma.alunos.all %}
                            {{ turma.alunos.all|length }} Aluno(s)
                        {% else %}
                            Nenhum aluno cadastrado
                        {% endif %}
                    </td>
                    <td>
                        {% for professor in turma.professores.all %}
                            {{ professor.nome }}<br>
                        {% empty %}
                            Nenhum professor cadastrado.
                        {% endfor %}
                    </td>
                    <td>
                        <a href="{% url 'editar_turma' turma.id %}" class="btn btn-warning btn-sm">Editar</a>
                        <a href="{% url 'consultar_turma' turma.id %}" class="btn btn-info btn-sm">Consultar</a>

                        <!-- Botão Excluir com modal de confirmação -->
                        <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal{{ turma.id }}">Excluir</button>

                        <!-- Modal de confirmação de exclusão -->
                        <div class="modal fade" id="confirmDeleteModal{{ turma.id }}" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Exclusão</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                                    </div>
                                    <div class="modal-body">
                                        Tem certeza de que deseja excluir a turma {{ turma.ano }} {{ turma.classe }}? Essa ação não pode ser desfeita.
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                        <a href="{% url 'excluir_turma' turma.id %}" class="btn btn-danger">Confirmar Exclusão</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Script do Bootstrap para funcionalidades JS (opcional) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Script para filtro de turmas na tabela -->
    <script>
        document.getElementById("buscar_turma").addEventListener("input", function() {
            var query = this.value.toLowerCase();
            var rows = document.querySelectorAll("#tabela_turmas .turma-row");

            rows.forEach(function(row) {
                var anoTurma = row.querySelector("td:nth-child(1)").textContent.toLowerCase();
                var classeTurma = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
                if (anoTurma.includes(query) || classeTurma.includes(query)) {
                    row.style.display = ""; 
                } else {
                    row.style.display = "none"; 
                }
            });
        });
    </script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\index.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Boletim Escolar</title>
    <!-- Link do CSS do Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Link do seu CSS personalizado -->
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4 text-dark">Bem-vindo ao Sistema de Boletim Escolar</h1>

        <div class="list-group">
            <a href="{% url 'login_professor' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-person-workspace me-2"></i> Professor
            </a>
            <a href="{% url 'login_aluno' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-person-badge me-2"></i> Aluno
            </a>
            <a href="{% url 'secretaria' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-house-door-fill me-2"></i> Secretaria
            </a>
            <a href="/admin/" class="list-group-item list-group-item-action">
                <i class="bi bi-shield-lock me-2"></i> Admin
            </a>
        </div>
    </div>

    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Script do Bootstrap para funcionalidades JS (opcional) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\login_aluno.html
# --------------------------------------------------

{% load static %}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Aluno</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4 text-dark">Login - Aluno</h1>
        <div class="card p-4">
            <form method="post">
                {% csrf_token %}
                <div class="form-group mb-3">
                    <label for="id_rm">RM</label>
                    <input type="text" name="rm" id="id_rm" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="id_password">Senha</label>
                    <input type="password" name="password" id="id_password" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-primary btn-block">Entrar</button>
            </form>
            {% if messages %}
            <div class="alert alert-danger mt-3">
                <ul>
                    {% for message in messages %}
                    <li>{{ message }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
        </div>
        <div class="text-center mt-3">
            <a href="{% url 'index' %}" class="btn btn-secondary">Voltar para a Página Inicial</a>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\login_professor.html
# --------------------------------------------------

{% load static %}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Professor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4 text-dark">Login - Professor</h1>
        <div class="card p-4">
            <form method="post">
                {% csrf_token %}
                <div class="form-group mb-3">
                    <label for="id_username">Usuário</label>
                    <input type="text" name="username" id="id_username" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="id_password">Senha</label>
                    <input type="password" name="password" id="id_password" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-primary btn-block">Entrar</button>
            </form>
            {% if messages %}
            <div class="alert alert-danger mt-3">
                <ul>
                    {% for message in messages %}
                    <li>{{ message }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
        </div>
        <div class="text-center mt-3">
            <a href="{% url 'index' %}" class="btn btn-secondary">Voltar para a Página Inicial</a>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\password_change.html
# --------------------------------------------------

<!-- password_change.html -->
{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mudar Senha - Sistema de Boletim Escolar</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Mudar Senha</h1>

        <div class="col-md-6 offset-md-3">
            <form method="post">
                {% csrf_token %}
                {{ form.as_p }}

                <button type="submit" class="btn btn-primary">Mudar Senha</button>
            </form>
        </div>

        <div class="text-center mt-3">
            <a href="{% url 'professor_home' %}" class="btn btn-secondary">Voltar</a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\professor.html
# --------------------------------------------------

<!-- core/templates/core/professor.html -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inserir Notas - Professor</title>
</head>
<body>
    <h1>Bem-vindo ao Sistema de Boletim Escolar</h1>

    <nav>
        <ul>
            <li><a href="{% url 'index' %}">Voltar</a></li>
        </ul>
    </nav>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\professor_home.html
# --------------------------------------------------

{% load static %}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página do Professor - Sistema de Boletim Escolar</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Olá, {{ user.professor_profile.nome }}!</h1>
        <h3 class="text-center mb-4">Suas Turmas</h3>
        <div class="d-flex justify-content-between mb-3">
            <a href="{% url 'logout_professor' %}" class="btn btn-danger">Sair</a>
            <a href="{% url 'mudar_senha_professor' %}" class="btn btn-warning">Mudar Senha</a>
        </div>
        <table class="table table-striped table-bordered table-custom">
            <thead class="table-primary">
                <tr>
                    <th>Classe</th>
                    <th>Ano</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                {% for turma in turmas %}
                <tr>
                    <td>{{ turma.classe }}</td>
                    <td>{{ turma.ano }}</td>
                    <td>
                        <a href="{% url 'detalhes_turma' turma.id %}" class="btn btn-info btn-sm">Ver Detalhes</a>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="3" class="text-center">Você ainda não está atribuído a nenhuma turma.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\core\templates\core\secretaria.html
# --------------------------------------------------

{% load static %}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Cadastros - Secretaria</title>
    <!-- Link do CSS do Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Link do seu CSS personalizado -->
    <link rel="stylesheet" href="{% static 'css/estilos.css' %}">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4 text-dark">Gerenciamento de Cadastros - Secretaria</h1>

        <!-- Lista com links de navegação -->
        <div class="list-group">
            <a href="{% url 'gerenciar_alunos' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-person-lines-fill me-2"></i> Gerenciar Alunos
            </a>

            <a href="{% url 'gerenciar_turmas' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-house-door-fill me-2"></i> Gerenciar Classes
            </a>

            <a href="{% url 'gerenciar_professores' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-person-plus-fill me-2"></i> Gerenciar Professores
            </a>

            <a href="{% url 'gerenciar_disciplinas' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-book-fill me-2"></i> Gerenciar Disciplinas
            </a>

            <a href="{% url 'index' %}" class="list-group-item list-group-item-action">
                <i class="bi bi-arrow-left-circle-fill me-2"></i> Voltar
            </a>
            
        </div>
    </div>

    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Script do Bootstrap para funcionalidades JS (opcional) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\scripts\criar_alunos.py
# --------------------------------------------------

from faker import Faker
from core.models import Aluno
from django.contrib.auth.models import User

# Inicializando o Faker
fake = Faker('pt_BR')

# Função para criar alunos aleatórios
def criar_alunos_aleatorios(n=80):
    for _ in range(n):
        # Gerar dados aleatórios
        nome = fake.name()  # Nome completo
        rm = fake.unique.random_number(digits=6)  # Número único de matrícula
        ra_rg = fake.random_number(digits=9)
        data_nascimento = fake.date_of_birth(minimum_age=6, maximum_age=10)  # Idade entre 6 e 10 anos
        status = 'ativo'  # Status fixo como 'ativo'
        email_responsavel = fake.email()
        telefone_responsavel = fake.phone_number()

        # Criar usuário associado ao aluno
        username = str(rm)
        password = 'senha@123'
        user = User.objects.create_user(username=username, password=password)

        # Criar e salvar o aluno no banco de dados
        Aluno.objects.create(
            user=user,
            nome=nome,
            rm=str(rm),  # Garantir que seja tratado como string
            ra_rg=str(ra_rg),  # Garantir que seja tratado como string
            data_nascimento=data_nascimento,
            status=status,
            email_responsavel=email_responsavel,
            telefone_responsavel=telefone_responsavel,
        )

# Chamar a função para criar 80 alunos
criar_alunos_aleatorios(80)


# --------------------------------------------------
# Arquivo: D:\My Documents\Download\Curso Django\Projetos\VisualCode\Boletim_online_v2\boletim_escolar_v2\static\css\estilos.css
# --------------------------------------------------


/* Definindo a cor de fundo para a página */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f9; /* Cor de fundo suave */
    margin: 20px;
    padding: 20px;
}

/* Cabeçalho principal */
h1 {
    color: #333;
    text-align: center;
    margin-top: 20px;
    font-size: 2em;
}

/* Estilo do link "Cadastrar Novo Aluno" */
a.cadastrar-aluno {
    text-decoration: none;
    color: #0066cc;
    font-weight: bold;
    padding: 10px;
    background-color: #f0f0f0;
    border-radius: 5px;
    transition: background-color 0.3s;
}

a.cadastrar-aluno:hover {
    background-color: #e0e0e0;
}

/* Estilo do link "Voltar" */
a.voltar {
    text-decoration: none;
    color: #0066cc;
    font-weight: bold;
    padding: 10px;
    background-color: #f0f0f0;
    border-radius: 5px;
    transition: background-color 0.3s;
}

a.voltar:hover {
    background-color: #e0e0e0;
}

/* Estilo para a área onde estão os links */
.links-container {
    width: 80%;  /* Alinha com a largura da tabela */
    margin: 20px auto;  /* Centraliza os links no corpo */
}

/* Estilo da tabela */
table {
    width: 80%;
    margin: 20px auto;
    border-collapse: collapse;
    background-color: #fff;
    border-radius: 8px; /* Bordas arredondadas */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Sombra suave */
}

th, td {
    padding: 12px 15px;         /* Preenchimento interno */
    text-align:  center !important;
    vertical-align: middle !important;
    font-size: 1.1em;           /* Tamanho da fonte */
}

th {
    background-color: #0066cc;
    color: white;
    font-weight: bold;
}

td {
    background-color: #f9f9f9;
    color: #333;
}

tr:nth-child(even) td {
    background-color: #f2f2f2;
}

tr:hover td {
    background-color: #e6f7ff; /* Cor de destaque ao passar o mouse */
}

/* Estilo para as ações de Editar, Consultar e Excluir */
td a {
    color: #ff9800;
    margin-right: 10px;
    font-weight: bold;
    transition: color 0.3s;
}

td a:hover {
    color: #e65100;
}

/* Estilização para centralizar o conteúdo em uma tabela com a classe table-centered */
.table-centered th, .table-centered td {
    padding: 12px 15px;
    text-align: center !important;
    vertical-align: middle !important;
    font-size: 1.1em;
}

/* Centralizando a tabela e o conteúdo das células */
.table-custom th, .table-custom td {
    padding: 12px 15px;
    text-align: center !important;
    vertical-align: middle !important;
    font-size: 1.1em;
}

/* Centralizando a tabela */
.table-custom {
    width: 100% !important; /* Tabela ocupa 100% da largura do container */
    margin: 0 auto; /* Centraliza a tabela horizontalmente */
}

/* Adicionando sombra à tabela para destacá-la */
.table-custom {
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

/* Cor de fundo das células de cabeçalho */
.table-custom th {
    background-color: #0066cc;
    color: white;
    font-weight: bold;
}

/* Cor de fundo das células de dados */
.table-custom td {
    background-color: #f9f9f9;
    color: #333;
}

/* Adicionando efeito ao passar o mouse nas linhas da tabela */
.table-custom tr:hover td {
    background-color: #e6f7ff;
}
